* C:\upp\out\upptst\CLANGx64.Debug.Debug_Full\ide_CleanupId.exe 29.11.2022 09:49:19, user: cxl

======
Foo1::operator<<(int)
Foo1::operator<<(int)
Foo1::operator<<(int)
======
Foo1::operator<(int)
Foo1::operator<(int)
Foo1::operator<(int)
======
Upp::Index<Upp::String>::Find(const Upp::String &k) const
Upp::Index::Find(const Upp::String&)const
Upp::Index<Upp::String>::Find(const Upp::String& k) const
======
clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value) __attribute__((dllimport))
clang_PrintingPolicy_setProperty(CXPrintingPolicy,CXPrintingPolicyProperty,unsigned int)
clang_PrintingPolicy_setProperty(CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned int Value) __attribute__((dllimport))
======
Foo1::Method()
Foo1::Method()
Foo1::Method()
======
Foo3<int>::Foo3() noexcept
Foo3::Foo3()
Foo3<int>::Foo3()
======
Foo1::operator*(int)
Foo1::operator*(int)
Foo1::operator*(int)
======
main(int argc, const char *argv[])
main(int,const char*[])
main(int argc, const char *argv[])
======
Ns::EditText(int &s, const char *title, const char *label, int (*f)(int), int maxlen, bool notnull)
Ns::EditText(int&,const char*,const char*,int(*)(int),int,bool)
Ns::EditText(int& s, const char *title, const char *label, int (*f)(int), int maxlen, bool notnull)
======
template <class C> auto SubRange(C&& c, int pos, int count) -> decltype(SubRange(c.begin() + pos, count))
SubRange(C&&,int,int)
template <C> auto SubRange(C&& c, int pos, int count)
======
inline void Foo()
Foo()
void Foo()
