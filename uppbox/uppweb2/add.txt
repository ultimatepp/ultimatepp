Ultimate++ is the new generation C++ Windows/Linux open-source development platform.

By utilizing of new ideas Ultimate++ achieves significant reduction of code complexity for most applications when compared to other development platforms.

Ultimate++ based application sources tend to be significantly shorter (often more than 50%) than sources of equivalent applications developed using any other C++ platform (see comparison with Qt: http://upp.sf.net/vsqt.html or vxWidgets: http://upp.sf.net/vswx.html).

Part of Ultimate++ platform is TheIDE - integrated development environment. TheIDE can use MinGW, free Microsoft Visual C++ Toolkit as compiler or regular Visual C++ (or GCC on Linux). It features:

- BLITZ technology that is able to speed-up GCC builds 4 times
  (and Visual C++ builds up to 2 times).
- GDB hosted visual debugger
- *NATIVE* PDB debugger (for code compiled using Visual C++)
- Code browser + Topic++ system to document your code, with live links
  between documentaion and browser code.
- Layout and Image designer for Ultimate++ libraries.

Even if you are not interested in another C++ toolkit, you can use TheIDE for any other development with great advantage.

All these wonders are available for free with complete sources at

http://upp.sf.net

Mirek

---------------------------------
[ANN] U++ 2007.1

http://www.ultimatepp.org

Ultimate++ is BSD licensed C++ cross-platform rapid application development suite focused on
programmers productivity without sacrificing runtime performance.

Based on strictly deterministic design it provides an alternative to GC collected platforms,
even for bussines logic oriented problems (U++ has strong SQL support).

U++ includes IDE with dialog and icon designers and "Assist++" (provides assistance for
C++ programming like pop-up list of methods on pressing '.' key).

U++ is now maintained for Win32, Linux, FreeBSD, PocketPC (experimental). Mac OS X support
is under development.

New features of 2007.1 release:

* Features missing in X11 now implemented (Pdf export, printing, tray icon)
* Raster image infrastructure completely reworked
* "Chameleon" skinning system which allows both native look of U++ applications across platforms
  AND custom skins to be designed/used. Gtk theming is used on X11 platforms
* New useful widgets: GridCtrl, CalendarCtrl and DateTimeCtrl
* Sql expressions are now dialect-adjusted before being executed on particular RDBMS target
* Library moved to Upp namespace
* Experimental PocketPC support was introduced
* Library fixed to support ARM and PowerPC CPUs
* A lot of new documentation and tutorials
* New Icon designer (supports alpha channel and has tools to produce antialiased icons)
* Many minor improvements and bug fixes


-------------
---------

Home           -- mel by obsahovat datum posledniho release a zmineno ze to je BSD licence
Download       -- mel by obsahovat stable, beta a cvs + odkaz na changelog k nim
Roadmap        -- no proste roadmap

Documentation
	Overview
	Comparisons
	Manual (byvaly documentation)
	GUI Toolkit examples (byvaly examples)
	Reference examples (stejne porad nevim co to je :-) )
	FAQ
	Authors & license

Community
	Forums
	Applications
	Getting involved

Contact
	Bugs & Wishlist
	Mailing lists
	SF project summary
	Contact developpers

------------------------------------------------
After a couple of days trying, I have hopefully moved the forum to the new webhosting (perhaps I will tell you the sad story of trying later :)

There was a lot of problems on the way so it is very likely that some things will not work (I did mistake of using newer forum version, which resulted in broken data model after import - I am fixing problems on the way, adding columns based on SQL errors ;)
- therefore please apologize any troubles and report them.

Mirek

---------
Hi,

Somewhat inspired by the D programming language thread and famous "wc" example (where D soundly beat C++, but in fact just standard C++ library), I have decided to compare the speed of my "reinvented wheel" (Ultimate++ platform uses own set of containers, own String, reimplements heap allocator etc, etc...) to the solution based on standard C++ library.

Anyway, I am not STL expert, it is possible and likely that something is wrong with my STL code, so I decided to ask for peer review here.

The benchmark description and results can be found here:

http://www.ultimatepp.org/www$uppweb2$vsstd$en-us.html

Of course, numbers alone are interesting as well, e.g. I have not expected so much performance delta between 32-bit and 64-bit mode (20%!), thought than Dinkumware provides better implementation than GCC team (maybe it is just this particular case) etc.. 

But the real question for now is: Have I missed some possible optimizations in the STL code?

Regards,

Mirek
